---
import Navbar from "../components/Navbar.astro";
import crypto from "crypto";
import { randomBytes } from "crypto";
---

<html lang="en">
    <head>
        <meta charset="UTF-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <title>Login</title>
    </head>
    <body>
        <Navbar />
        <h2>Login to your Spotify account</h2>
        <button id="spotifyLoginButton">Login with Spotify</button>

        <script>
            const generateRandomString = (length: number): string => {
                return crypto.randomBytes(60).toString("hex").slice(0, length);
            };
            const spotifyLoginButton = document.querySelector(
                "#spotifyLoginButton",
            ) as HTMLButtonElement;

            spotifyLoginButton.addEventListener(
                "click",
                async (): Promise<void> => {
                    try {
                        // window.location.href = "http://localhost:3000/login";
                        // const response = await fetch(
                        //     "http://localhost:3000/login",
                        //     {
                        //         method: "GET",
                        //         headers: {
                        //             "Content-Type": "application/json",
                        //         },
                        //         credentials: "include",
                        //     },
                        // );

                        // if (response.ok) {
                        //     alert("Login Route successful!");
                        // } else {
                        //     alert("Login failed");
                        // }

                        const storedState = generateRandomString(16);
                        const authUrl =
                            `https://accounts.spotify.com/authorize?` +
                            new URLSearchParams({
                                response_type: "code",
                                client_id: process.env.CLIENT_ID || "",
                                redirect_uri: process.env.REDIRECT_URI || "",
                                scope: "user-read-private user-read-email",
                                state: storedState,
                            }).toString();
                        window.location.href = `${authUrl}`;
                    } catch (error) {
                        console.error("Error during login:", error);
                    }
                },
            );

            export function randomBytes(arg0: number) {
                throw new Error("Function not implemented.");
            }
        </script>
    </body>
</html>
